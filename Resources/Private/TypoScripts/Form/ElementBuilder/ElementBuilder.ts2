/**
 * @context className the class name to be rendered
 * @context propertyName
 * @context propertyAnnotations
 * @context propertyType
 * @context propertyElementType
 */
prototype(TYPO3.Expose:Form.ElementBuilder) < prototype(TYPO3.TypoScript:Case) {
	prototype(TYPO3.TypoScript:Matcher).type = 'TYPO3.Expose:Form.DefaultElementBuilder'

#	debug {
#		condition = ${q(p).debug(propertyAnnotations)}
#		@position = 'start'
#	}

	ignore {
		condition = ${propertyAnnotations['TYPO3\Expose\Annotations\Ignore']}
		@position = '10'
	}

	elementFromAnnotation {
		condition = ${propertyAnnotations['TYPO3\Expose\Annotations\Element']}
		@position = '10'
		@override.formFieldType = ${propertyAnnotations['TYPO3\Expose\Annotations\Element']['0'].name}
	}


	textfieldType {
		condition = ${propertyType == 'string' && propertyAnnotations['Doctrine\ORM\Mapping\Column']['0'].type == 'text'}
		@position = '90'
		@override.formFieldType = 'TYPO3.Form:MultiLineText'
	}

	simpleStringType {
		condition = ${propertyType == 'string'}
		@position = '100'
		@override.formFieldType = 'TYPO3.Form:SingleLineText'
	}



	inline {
		condition = ${propertyAnnotations['TYPO3\Expose\Annotations\Inline']}
		type = 'TYPO3.Expose:Form.InlineElementBuilder'
		@position = '190'
		@override.formFieldType = ${propertyAnnotations['TYPO3\Expose\Annotations\Inline']['0'].element}
	}

	manyToMany {
		condition = ${propertyAnnotations['Doctrine\ORM\Mapping\ManyToMany']}
		@position = '200'
		@override.formFieldType = 'TYPO3.Form:MultipleSelectDropdown'
	}

	manyToOne {
		condition = ${propertyAnnotations['Doctrine\ORM\Mapping\ManyToOne']}
		@position = '200'
		@override.formFieldType = 'TYPO3.Form:SingleSelectDropdown'
	}

	oneToMany {
		condition = ${propertyAnnotations['Doctrine\ORM\Mapping\OneToMany']}
		@position = '200'
		@override.formFieldType = 'TYPO3.Form:MultipleSelectDropdown'
	}

	oneToOne {
		condition = ${propertyAnnotations['Doctrine\ORM\Mapping\OneToOne']}
		@position = '200'
		@override.formFieldType = 'TYPO3.Form:SingleSelectDropdown'
	}

	textfieldType {
		// TODO: bug in EEL: ['0'] should not need to be quoted.
		condition = ${propertyType == 'string' && propertyAnnotations['Doctrine\ORM\Mapping\Column']['0'].type == 'text'}
		@position = '90'
		@override.formFieldType = 'TYPO3.Form:MultiLineText'
	}

	// NODE START
	booleanType {
			// We want to hide the editor for the _removed flag
		condition = ${propertyType == 'boolean' && propertyName != '_removed'}
		@position = '90'
		@override.formFieldType = 'TYPO3.Form:Checkbox'
	}

	nodeTextfieldType {
		// TODO: bug in EEL: ['0'] should not need to be quoted.
		condition = ${propertyType == 'string' && propertySchema.userInterface.class == 'T3.Content.UI.Editor.HtmlEditor'}
		@position = '90'
		@override.formFieldType = 'TYPO3.Form:MultiLineText'
	}

	nodeDateType {
		// TODO: bug in EEL: ['0'] should not need to be quoted.
		condition = ${propertyType == 'date'}
		@position = '90'
		@override.formFieldType = 'TYPO3.Form:DatePicker'
		element.@override.propertyType = '\DateTime'

	}
	// NODE END

}