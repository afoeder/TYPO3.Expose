// REVIEWED for release

TYPO3.Expose.NewController.index = TYPO3.Expose:FormLayout
TYPO3.Expose.EditController.index = TYPO3.Expose:FormLayout

prototype(TYPO3.Expose:FormLayout) < prototype(TYPO3.TypoScript:Template) {
	templatePath = 'resource://TYPO3.Expose/Private/Elements/FormLayout.html'
	form = TYPO3.Expose:FormRenderer
}

prototype(TYPO3.Expose:FormRenderer) {
	@class = 'TYPO3\\Expose\\TypoScriptObjects\\FormRenderer'
	form = TYPO3.Expose:FormBuilder
}

/**
 * @context string className the class name of the form to build
 */
prototype(TYPO3.Expose:FormBuilder) < prototype(TYPO3.TypoScript:Case) {
	nodeMatcher {
		condition = ${className == 'TYPO3\TYPO3CR\Domain\Model\NodeInterface'}
		type = 'TYPO3.Expose:NodeFormBuilder'
		@position = 10
	}

	objectMatcher {
		condition = ${true}
		type = 'TYPO3.Expose:ObjectFormBuilder'
		@position = 'end'
	}
}

/**
 * @param string className=${className}
 * @param object objects=${objects} (optional) list of objects to be (optionally) bound to the form
 * @param string formIdentifier
 * @param string formPresetName
 */
prototype(TYPO3.Expose:ObjectFormBuilder) {
	@class = 'TYPO3\\Expose\\TypoScriptObjects\\ObjectFormBuilder'
	className = ${className}
	objects = ${objects}
	formIdentifier = 'form'
	formPresetName = 'expose'
	callbackAction = ${callback}

	sectionBuilder = TYPO3.Expose:Form.SectionBuilder
	inlineBuilder = TYPO3.Expose:Form.InlineBuilder
	elementBuilder = TYPO3.Expose:Form.ElementBuilder
}

/**
 * @param object objects=${objects} (optional) list of objects to be (optionally) bound to the form
 * @param string formIdentifier
 * @param string formPresetName
 */
prototype(TYPO3.Expose:NodeFormBuilder) {
	@class = 'TYPO3\\Expose\\TypoScriptObjects\\NodeFormBuilder'
	objects = ${objects}
	formIdentifier = 'form'
	formPresetName = 'expose'
	callbackAction = ${callback}

	sectionBuilder = TYPO3.Expose:Form.SectionBuilder
	elementBuilder = TYPO3.Expose:Form.ElementBuilder

		// If we are inside the "node" context, we can use the label of the property
		// schema as label of the form element
	prototype(TYPO3.Expose:Form.DefaultElementBuilder) {
		label = ${propertySchema.label}
	}
}

/**
 * @param identifier
 * @param parentFormElement=${parentFormElement}
 * @param identifier=${identifier}
 */
prototype(TYPO3.Expose:Form.SectionBuilder) {
	@class = 'TYPO3\\Expose\\TypoScriptObjects\\SectionBuilder'
	parentFormElement = ${parentFormElement}
	identifier = ${identifier}
}

/**
 * @context className the class name to be rendered
 * @context propertyName
 * @context propertyAnnotations
 * @context propertyType
 * @context propertyElementType
 */
prototype(TYPO3.Expose:Form.ElementBuilder) < prototype(TYPO3.TypoScript:Case) {
	prototype(TYPO3.TypoScript:Matcher).type = 'TYPO3.Expose:Form.DefaultElementBuilder'

#	debug {
#		condition = ${q(p).debug(propertyAnnotations)}
#		@position = 'start'
#	}

	ignore {
		condition = ${propertyAnnotations['TYPO3\Expose\Annotations\Ignore']}
		@position = '10'
	}

	elementFromAnnotation {
		condition = ${propertyAnnotations['TYPO3\Expose\Annotations\Element']}
		@position = '10'
		@override.formFieldType = ${propertyAnnotations['TYPO3\Expose\Annotations\Element']['0'].name}
	}


	textfieldType {
		condition = ${propertyType == 'string' && propertyAnnotations['Doctrine\ORM\Mapping\Column']['0'].type == 'text'}
		@position = '90'
		@override.formFieldType = 'TYPO3.Form:MultiLineText'
	}

	simpleStringType {
		condition = ${propertyType == 'string'}
		@position = '100'
		@override.formFieldType = 'TYPO3.Form:SingleLineText'
	}



	inline {
		condition = ${propertyAnnotations['TYPO3\Expose\Annotations\Inline']}
		type = 'TYPO3.Expose:Form.InlineElementBuilder'
		@position = '190'
		@override.formFieldType = ${propertyAnnotations['TYPO3\Expose\Annotations\Inline']['0'].element}
	}

	manyToMany {
		condition = ${propertyAnnotations['Doctrine\ORM\Mapping\ManyToMany']}
		@position = '200'
		@override.formFieldType = 'TYPO3.Form:MultipleSelectDropdown'
	}

	manyToOne {
		condition = ${propertyAnnotations['Doctrine\ORM\Mapping\ManyToOne']}
		@position = '200'
		@override.formFieldType = 'TYPO3.Form:SingleSelectDropdown'
	}

	oneToMany {
		condition = ${propertyAnnotations['Doctrine\ORM\Mapping\OneToMany']}
		@position = '200'
		@override.formFieldType = 'TYPO3.Form:MultipleSelectDropdown'
	}

	oneToOne {
		condition = ${propertyAnnotations['Doctrine\ORM\Mapping\OneToOne']}
		@position = '200'
		@override.formFieldType = 'TYPO3.Form:SingleSelectDropdown'
	}

	textfieldType {
		// TODO: bug in EEL: ['0'] should not need to be quoted.
		condition = ${propertyType == 'string' && propertyAnnotations['Doctrine\ORM\Mapping\Column']['0'].type == 'text'}
		@position = '90'
		@override.formFieldType = 'TYPO3.Form:MultiLineText'
	}

	// NODE START
	booleanType {
			// We want to hide the editor for the _removed flag
		condition = ${propertyType == 'boolean' && propertyName != '_removed'}
		@position = '90'
		@override.formFieldType = 'TYPO3.Form:Checkbox'
	}

	nodeTextfieldType {
		// TODO: bug in EEL: ['0'] should not need to be quoted.
		condition = ${propertyType == 'string' && propertySchema.userInterface.class == 'T3.Content.UI.Editor.HtmlEditor'}
		@position = '90'
		@override.formFieldType = 'TYPO3.Form:MultiLineText'
	}

	nodeDateType {
		// TODO: bug in EEL: ['0'] should not need to be quoted.
		condition = ${propertyType == 'date'}
		@position = '90'
		@override.formFieldType = 'TYPO3.Form:DatePicker'
		element.@override.propertyType = '\DateTime'

	}
	// NODE END

}

/**
 * @param formFieldType=${formFieldType}
 * @param parentFormElement=${parentFormElement}
 * @param identifier=${formElementIdentifier}
 * @param label=${propertyName}
 */
prototype(TYPO3.Expose:Form.DefaultElementBuilder) {
	@class = 'TYPO3\\Expose\\TypoScriptObjects\\FormElementBuilder\\DefaultFormElementBuilder'
	formFieldType = ${formFieldType}
	parentFormElement = ${parentFormElement}
	identifier = ${formElementIdentifier}
	label = ${propertyName}
	propertyAnnotations = ${propertyAnnotations}
	propertyName = ${propertyName}
	propertyType = ${propertyType}
	propertyValue = ${propertyValue}
	className = ${className}
}

/**
 * @param formFieldType=${formFieldType}
 * @param parentFormElement=${parentFormElement}
 * @param identifier=${formElementIdentifier}
 * @param label=${propertyName}
 */
prototype(TYPO3.Expose:Form.InlineElementBuilder) < prototype(TYPO3.Expose:Form.DefaultElementBuilder) {
	@class = 'TYPO3\\Expose\\TypoScriptObjects\\FormElementBuilder\\InlineFormElementBuilder'
	formBuilder = ${formBuilder}
}